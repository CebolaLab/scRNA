

## 6. Cell type identity

Next, the clusters will be identified as specific cell-types based on curated marker gene sets. Listed below are several methods used by published papers to annotate clusters of liver scRNA-seq data:

- [Ramachandran et al. (2019)](https://www.nature.com/articles/s41586-019-1631-3): removed contaminating circulatory cells based on clustering with scRNA from PBMCs. Obtained a signature score across a curated  list of known marker genes per cell lineage in the liver. The score was defined as the mean expression of the signature marker genes. 
- [MacParland et al. (2018)](https://www.nature.com/articles/s41467-018-06318-7): "the cell-type identities for each cluster were determined manually using a compiled panel of available known hepatocyte/immune cell transcripts."
- [Wang et al. (2021)](https://www.nature.com/articles/s41598-021-98806-y): "we compared out manual annotation of clusters based on known cell-type-specific marker genes to that produced through automated classification using [SingleR](https://www.nature.com/articles/s41598-021-98806-y#ref-CR33)".
- [Payen et al. (2021)](https://www.sciencedirect.com/science/article/pii/S2589555921000549#sec2) "The expression of different combinations of genes was used to define scores and signatures using the Seurat PercentageFeatureSet function".
- [Aizarani et al. (2019)](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6687507/). cells from select clusters were reanalyzed with [RaceID3](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6687507/#R4) (see paper for parameters). [StemID](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6687507/#R24) was run on resulting, filtered and feature-selected expression matrix, with target clusters "inferred by FateID using ASGR1 plus ALB and CXCL8 plus MMP7 as markers for hepatocyte and cholangiocyte lineage target clusters. Using the KRT19 and CFTR as mature cholangiocyte markers yields highly similar results."

Marker genes: "tissue-resident KCs can be distinguished from monocyte-derived marcophages by expression of MARCO, CD163,FCGR3A and CD5L, and the absense of LSP1 and CD48". (biorXiv cambridge paper on liver development).

Here, we will calculate a cell-type score based on curated marker gene sets obtained by integrating marker genes from PanglaoDB and in-house curated gene sets. The curated gene set lists are available as a file in this Github (xxxxxx), with the pipeline used to generate this file described below:

```sh
#Download the PangloaDB markers 2020 file
wget https://www.panglaodb.se/markers/PanglaoDB_markers_27_Mar_2020.tsv.gz 

#Extract markers for liver cell types
awk -v FS="\t" '{if(($1=="Mm Hs" || $1=="Hs") && $3~/(Hepatocytes|Macrophages|Cholangiocytes|Endothelial cells|Hepatic stellate cells|Hepatoblasts|Hepatocytes|Kupffer cells|Macrophages|Mast cells|NK cells|T cells|B cells|Monocytes|Myoblasts|Myocytes)/) print $0}' PanglaoDB_markers_27_Mar_2020.tsv | cut -f 2,3 | grep -Ev "blood|aorta" > liver.markers
```

Here, we will use Seurat `PercentageFeatureSet`:

*"This function enables you to easily calculate the percentage of all the counts belonging to a subset of the possible features for each cell. This is useful when trying to compute the percentage of transcripts that map to mitochondrial genes for example. The calculation here is simply the column sum of the matrix present in the counts slot for features belonging to the set divided by the column sum for all features times 100."*

**Note**: take a look at the *AddmoduleScore* function in Seurat which "represents the average expression of all genes within a cell population subtracted by the average expression of randomly selected genes in the same population.

```R
markers=read.table('liver.markers',sep='\t')
LSEC.markers=read.table('LSEC.markers')
#subset the marker genes dataframe for the genes reported
markers=subset(markers,markers[,1] %in% rownames(SAMN12614700.filtered@assays$SCT@counts))
LSEC.markers=subset(LSEC.markers,LSEC.markers[,1] %in% rownames(SAMN12614700.filtered@assays$SCT@counts))
#Combine the database and in-house LSEC marker list
markers=rbind(markers,cbind(V1=LSEC.markers,V2='LSEC'))

#PercentageFeatureSet
for(x in unique(markers[,2])){
    name=print(gsub(' ','.',x)) #replace spaces in the name with .
    features=as.character(subset(markers,markers[,2]==x)[,1])
    SAMN12614700.filtered[[name]]=PercentageFeatureSet(SAMN12614700.filtered,features = features)
}
```

You can colour the UMAP plot according to the features, which are the specific cell-type % expression scores stored in the metaData.

```R
FeaturePlot(object = SAMN12614700.filtered, features = "Endothelial.cells") #unique(markers[,2]))
```

<img src="https://github.com/CebolaLab/scRNA/blob/main/Figures/Endothelial_score_UMAP.png" height="400">

We can also plot a heatmap of the cell-type scores by creating a matrix with the mean score per cluster:

```R
metaData=SAMN12614700.filtered@meta.data
cell.types=gsub(' ','.',unique(markers[,2]))
cell_type.scores=aggregate(metaData[,cell.types], list(metaData$seurat_clusters), mean)

heatmap(as.matrix(cell_type.scores[,-1]),scale="none",margins=c(10,6),labRow=cell_type.scores[,1])
```

<img src="https://github.com/CebolaLab/scRNA/blob/main/Figures/score_heatplot.png" height="500">  


Based on the this plot, we can see that clusters 3,7,9,1 and 0 score positively as endothelial cells. We can look in more granular detail at the gene expression levels:

```R
DoHeatmap(object = SAMN12614700.filtered, features = unique(subset(markers,markers[,2]=='Endothelial cells')[,1]))
```

<img src="https://github.com/CebolaLab/scRNA/blob/main/Figures/Endo_heatmap.png" height="700">


Notably, liver endothelial cells include highly specialised LSECs (liver sinusoidal endothelial cells). We can plot the expression of our LSEC markers:

```R
DoHeatmap(object = SAMN12614700.filtered, features = unique(LSEC.markers[,1])) 
```

We can see that cluster 3 stands out significantly as LSECs!  

<img src="https://github.com/CebolaLab/scRNA/blob/main/Figures/LSEC_heatmap.png" height="700">

Using this information we can relabel the clusters:

```R
new.cluster.ids=c('0'='Endothelial','1'='Endothelial','2'='Monocytes','3'='LSEC','4'='NK/T/macrophages','5'='B cells','6'='Hepatocytes/cholangiocytes','7'='Endothelial','8'='Kupffer cells','9'='Endothelial')

#Create a backup of the meta data and remove the columns with the cluster scores which will facilitate the correct labelling 
metaData=SAMN12614700.filtered@meta.data
SAMN12614700.filtered@meta.data=SAMN12614700.filtered@meta.data[,1:8]
SAMN12614700.filtered <- RenameIdents(SAMN12614700.filtered, new.cluster.ids)

DimPlot(object = SAMN12614700.filtered, label = TRUE, reduction = "umap") + NoLegend()
```

<img src="https://github.com/CebolaLab/scRNA/blob/main/Figures/labelled_UMAP.png" height="500">



# Extra notes

[`DropletUtils`](https://bioconductor.org/packages/release/bioc/vignettes/DropletUtils/inst/doc/DropletUtils.html) is an R package for filtering droplet-based scRNA-seq data. (See example use in [Brüning et al. (2022)](https://academic.oup.com/gigascience/article/doi/10.1093/gigascience/giac001/6515741)). This package can be used to read in the count matrix to R, filter empty droplets and visualise QC plots for the distribution of counts across barcodes, as well as downsample the count matrix or raw reads etc.


 **Recommendations**: *do not* run `DoubletFinder` on aggregated scRNA-seq data representing multiple distinct samples and filter your data first to remove low-quality cell clusters. The authors recommends (1) manually threshold raw gene expression matrices according to RNA nUMIs, (2) pre-process data using [standard workflow](https://satijalab.org/seurat/articles/pbmc3k_tutorial.html), including data normalization and scaling (3) identify clusters with low RNA UMIs, high % mitochondrial reads and/or uninformative marker genes, (4) remove clusters, pre-process again, and run DoubletFinder.


Note...sctransform was used by the Satija lab in their 2022 [publication](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-021-02584-9#Sec8)

"In particular, two recent studies proposed to use generalized linear models (GLMs), where cellular sequencing depth was included as a covariate, as part of scRNA-seq preprocessing workflows. Our sctransform [9] approach utilizes the Pearson residuals from negative binomial regression as input to standard dimensional reduction techniques, while GLM-PCA [10] focuses on a generalized version of principal component analysis (PCA) for data with Poisson-distributed errors. More broadly, multiple techniques aim to learn a latent state that captures biologically relevant cellular heterogeneity using either matrix factorization or neural networks [11–13], alongside a defined error model that describes the variation that is not captured by the latent space.


- [(Brüning et al. 2022)](https://academic.oup.com/gigascience/article/doi/10.1093/gigascience/giac001/6515741) filter cells using the R packages DropletUtils and then use `Seurat` for downstream analysis, retaining cells with gene counts \>200 and \<2,500 and a mitochondrial content \<10%.
- [Xu et al. (2021)](https://academic.oup.com/hmg/article/30/5/370/6131713?login=false#supplementary-data) "removed doublet cells using “DoubletFinder”. Then we use the function “decontX” of “celda” to correct the probable cross containment. Then the corrected expression matrix was processed by “Seurat V3.14”. For the quality control, cells with 0~30000 UMIs, 200~5000 genes, and less than 50% mitochondrial expression percentage were filtered out for the next analysis."

For single-nuclei RNA, [Hardwick et al. (2022)](https://www.nature.com/articles/s41587-022-01231-3) excluded nuclei with unique gene counts >7,500 or <200 or >4% mitochondrial gene expression. UMI numbers and mitochondrial gene expression % were regressed from each nucleus and the matrix was log-normalised and scaled to 10,000 reads per cell. Performed both tSNE and UMAP non-lnear reduction techniques... cell types assigned by canonical marker genes for each cluster... cell type annotation confirmed by aligning to <other data>. (Hardwick et al. 2022, Nature Biotechnology).

7. **Feature selection, dimensionality reduction and visualisation**. 

> Feature selection  
Here, the data is filtered for informative genes, such as *highly variable genes* (HVGs), usually between 1,000 and 5,000. Tools for selecting HVGs are provided by Seurat and Scanpy, which bin genes by their mean expression and select genes with the highest variance-to-mean ratio. Make sure to check what type of data your method expects (e.g. raw count data or log-transformated data). For your final analysis, HVGs should be selected *after* normalization and pre-processing. (Note some tools select HVGs as part of the pre-processing step; these are not the same as your final list of HVGs which give your clusters).

For dimensionaly reduction, UMAP is reported to be the optimal method over several other popular alternatives (e.g. t-SNE, PCA and MDS) [(Yang et al. 2021)](https://www.sciencedirect.com/science/article/pii/S2211124721008597)

Try out the [densMAP](http://bioconductor.org/books/3.13/OSCA.advanced/dimensionality-reduction-redux.html) algorithm from [Narayan et al. (2021)](http://bioconductor.org/books/3.13/OSCA.advanced/dimensionality-reduction-redux.html#ref-narayan2021densvis) which improves within-cluster resolution by "incorporating information about the average distance to the nearest neighbours when creating the embedding" (example pipeline [here](http://bioconductor.org/books/3.13/OSCA.advanced/dimensionality-reduction-redux.html)).

> Dimensionality reduction  
**Clustering**. In the 2019 review by Leuken and Theis, the most popular method for clustering was **multi-resolution modularity optimization** algorithm as implemented in the Louvian algorithm. This algorithm detects groups of cells that have "more links between them than expected from the number of links the cells have in total". (Implemented by Seurat and Scanpy). 

![Figure 1 (Leuken and Theis, 2019)](https://github.com/CebolaLab/scRNA/blob/main/Figures/Leucken_Theis_Table1.png)
Table 1 from [(Leucken and Theis, 2019)](https://www.embopress.org/doi/full/10.15252/msb.20188746) summarises the types of data expected as input for downstream analysis.

**DATASET INTEGRATION** 

Integrating multiple scRNA-seq datasets presents an additional challenge, which may again be tackled with different methods. Note, the below are specifically for integrating multiple sequencing runs of different GEM Wells. For samples sequenced in the same GEM well, pass the multiple fastq files to `cellranger count` using the `--fastqs` argument. 

- [(Brüning et al. 2022)](https://academic.oup.com/gigascience/article/doi/10.1093/gigascience/giac001/6515741) integrate expression matrices using Suerat, including: normalization with the `SCTransform` function, rank the features using the `SelectIntegrationFeatures` function, with the resulting features controlled using the function `PrepSCTIntegration`. Anchors were determined by `FindIntegrationAnchors` and afterwards used with the `IntegrateData` function. 
- With **CellRanger** using `cellranger aggr` which aggregates multiple runs of `cellranger count`, normalizes runs to the same effective sequencing depth (the pipeline equalizes the average read depth per cell between groups before merging), and then performs secondary analysis on the combined data (this produces one single-feature barcode matrix and a .cloupe file for visualizing with Loupe Browser). `cellranger aggr` uses Chemistry Batch Correction when aggregating resuts from a combination of 5' and 3', or 3' v2 and 3' v3 Gene Expression data, which improves the mixing of the batches in the t-SNE visualization and clustering results (note that residual batch effects may still be present). 

Seurat anchors?

- Seurat `FindClusters`. 
- CellRanger provides the `Loupe Browser` which can be used to explore data.

#### UMAP plots

[(Brüning et al. 2022)](https://academic.oup.com/gigascience/article/doi/10.1093/gigascience/giac001/6515741) UMAP run with the first 20 PCs.
**Seurat**: `FindAllMarkers`
